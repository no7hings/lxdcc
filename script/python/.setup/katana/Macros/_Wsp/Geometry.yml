option:
    root: '/rootNode'
    category: 'workspace'
    type: 'geometry'
    type_abr: 'gmt'
    description:
        |-
        load geometry here
    variant_key: 'geometry'
    #
    color:
        r: 0
        g: 0
        b: 0
#
main:
    type: 'Group'
    path: '<option.root>/<option.type>'
    input: '<.path>.join'
    output: '<.path>.output'
    #
    attributes:
        ns_offsetX: 480
        ns_offsetY: 120
        #
        ns_colorr: <option.color.r>
        ns_colorg: <option.color.g>
        ns_colorb: <option.color.b>
    #
    input_ports:
        - join
    #
    output_ports:
        - output
    #
    ports:
        reset_node:
            widget: button
            value: ''
            tool_tip: '...'
        # option
        option/passthrough_enable:
            widget: boolean
            value: False
            tool_tip: '...'

        option/scheme:
            widget: enumerate
            value: ['asset', 'shot']
            tool_tip: '...'

        option/asset:
            widget: string
            value: ''
            tool_tip: '...'

        option/shot:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        option/guess_option:
            widget: button
            value: ''
            tool_tip: '...'
        # cache
        #   asset usd
        cache/asset_usd/enable:
            widget: boolean
            value: False
#            value: True
            tool_tip: '...'

        cache/asset_usd/file:
            widget: file
            value: ''
#            value: '/production/shows/nsa_dev/assets/chr/td_test/shared/mod/modeling/td_test.mod.modeling.v004/set/usd/td_test.usda'
            tool_tip: '...'

        cache/asset_usd/location:
            widget: path
            value: '/root/world/geo'
            tool_tip: '...'

        cache/asset_usd/root:
            widget: path
            value: '/root/world/geo/master'
            tool_tip: '...'

        cache/asset_usd/default:
            widget: path
            value: '/root/world/geo/master/hi/mesh'
            tool_tip: '...'
        #   usd create
        cache/create_usd:
            widget: button
            value: ''
            tool_tip: '...'
        #   setting
        setting/resolver_look_file_enable:
            widget: boolean
            value: False
            tool_tip: '...'
        #   debugger
        debugger/reverse_face_vertex_enable:
            widget: boolean
            value: False
            tool_tip: '...'
        # variant
        #   asset version main
        variant/asset_version_main/enable:
            widget: boolean
            value: False
            tool_tip: '...'

        variant/asset_version_main/model:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/asset_version_main/groom:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/asset_version_main/rig:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/asset_version_main/effect:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/asset_version_main/surface:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/asset_version_main/light:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'
        #   asset version override
        variant/asset_version_override/enable:
            widget: boolean
            value: False
            tool_tip: '...'

        variant/asset_version_override/model:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/asset_version_override/groom:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/asset_version_override/rig:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/asset_version_override/effect:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/asset_version_override/surface:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/asset_version_override/light:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'
        #   shot asset
        variant/shot_asset:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'
        #   shot version main
        variant/shot_version_main/enable:
            widget: boolean
            value: False
            tool_tip: '...'

        variant/shot_version_main/animation:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/shot_version_main/character_effect:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/shot_version_main/effect:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/shot_version_main/light:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'
        #   shot version override
        variant/shot_version_override/enable:
            widget: boolean
            value: False
            tool_tip: '...'

        variant/shot_version_override/animation:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/shot_version_override/character_effect:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/shot_version_override/effect:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'

        variant/shot_version_override/light:
            widget: enumerate
            value: [ 'None' ]
            tool_tip: '...'
        #   usd variant update
        variant/update_variant:
            widget: button
            value: 'import lxkatana.scripts as ktn_scripts; ktn_scripts.ScpWspGeometry(node).update_variant()'
            tool_tip: '...'
        # extra
        #   translate
        extra/translate/enable:
            widget: boolean
            value: False
            tool_tip: '...'

        extra/translate/root:
            widget: path
            value: '/root/world/geo/master'
            tool_tip: '...'

        extra/translate/value:
            widget: float3
            value: [0, 0, 0]
            tool_tip: '...'

        extra/translate/translate_above_axis_y:
            widget: boolean
            value: True
            tool_tip: '...'

        extra/translate/translate_to_axis_origin:
            widget: button
            value: ''
            tool_tip: '...'
        #   turn around
        extra/turn_around/enable:
            widget: boolean
            value: False
            tool_tip: '...'

        extra/turn_around/root:
            widget: path
            value: '/root/world/geo/master'
            tool_tip: '...'

        extra/turn_around/direction:
            widget: enumerate
            value: ['clockwise', 'anticlockwise']
            tool_tip: '...'

        extra/turn_around/start_frame:
            widget: integer
            value: 1
            tool_tip: '...'

        extra/turn_around/end_frame:
            widget: integer
            value: 60
            tool_tip: '...'

        extra/turn_around/frame_offset:
            widget: integer
            value: 0
            tool_tip: '...'

        extra/turn_around/pivot_locator:
            widget: path
            value: '/root/world/loc/geometry_pivot'
            tool_tip: '...'
            lock: True

        extra/turn_around/axis:
            widget: enumerate
            value: ['X', 'Y', 'Z']
            default: 'Y'
            tool_tip: '...'
        # workspace
        workspace/declare_enable:
            widget: boolean
            value: True
            tool_tip: '...'

        workspace/register/variant_key:
            widget: string
            value: '<option.variant_key>'
            tool_tip: '...'
            lock: True

        workspace/register/geometry_scheme:
            widget: enumerate
            value: ['default', 'effect']
            tool_tip: '...'

        workspace/register/geometry_root:
            widget: path
            value: '/root/world/geo/master'
            tool_tip: '...'

        workspace/register/geometry_extra:
            widget: string
            value: ''
            tool_tip: '...'
            lock: True
        # info
        info/category:
            widget: string
            value: '<option.category>'
            tool_tip: '...'
            lock: True

        info/type:
            widget: string
            value: '<option.type>'
            tool_tip: '...'
            lock: True
#
node:
    # asset
    asset_placeholder:
        type: 'PonyCreate'
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.out'
        #
        expressions:
            name: 'getParent().cache.asset_usd.default'
    #   usd
    asset_usd:
        type: 'DollarUsdIn'
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.o0'
        #
        expressions:
            usd/fileName: 'getParent().cache.asset_usd.file'
            usd/location: 'getParent().cache.asset_usd.location'
    #   usd enable
    asset_usd_enable:
        type: Switch
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.output'
        #
        input_ports:
            - 'off'
            - 'on'
        #
        expressions:
            in: '1 if getParent().cache.asset_usd.enable else 0'
        #
        connections:
            # off
            - '<..asset_placeholder.output>'
            - '<.path>.off'
            # on
            - '<..asset_usd.output>'
            - '<.path>.on'
    #   variant
    #       asset version main
    asset_version_main:
        type: 'GroupStack'
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.out'
        #
        connections:
            - '<..asset_usd_enable.output>'
            - '<.path>.in'
        #
        child:
            type: 'UsdInVariantSelect'
            #
            path_pattern: '{parent}/<option.type_abr>__<...key>__{key}'
            #
            nodes:
                model:
                    parameters:
                        args/variantSetName/enable: 1
                        args/variantSetName/value: '<...key>_main'
                        args/variantSelection/enable: 1
                        args/variantSelection/value: 'None'
                    #
                    expressions:
                        location: 'getParent().getParent().cache.asset_usd.root'
                        args/variantSelection/value: 'getParent().getParent().variant.asset_version_main.<...key>'
                groom: '$.model'
                rig: '$.model'
                effect: '$.model'
                surface: '$.model'
                light: '$.model'
    #       asset version main enable
    asset_version_main_enable:
        type: Switch
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.output'
        #
        input_ports:
            - 'off'
            - 'on'
        #
        expressions:
            in: '1 if getParent().variant.asset_version_main.enable else 0'
        #
        connections:
            # off
            - '<..asset_usd_enable.output>'
            - '<.path>.off'
            # on
            - '<..asset_version_main.output>'
            - '<.path>.on'
    #       asset version override
    asset_version_override:
        type: 'GroupStack'
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.out'
        #
        connections:
            - '<..asset_version_main_enable.output>'
            - '<.path>.in'
        #
        child:
            type: 'UsdInVariantSelect'
            #
            path_pattern: '{parent}/<option.type_abr>__<...key>__{key}'
            #
            nodes:
                model:
                    parameters:
                        args/variantSetName/enable: 1
                        args/variantSetName/value: '<...key>_override'
                        args/variantSelection/enable: 1
                        args/variantSelection/value: 'None'
                    #
                    expressions:
                        location: 'getParent().getParent().cache.asset_usd.root'
                        args/variantSelection/value: 'getParent().getParent().variant.asset_version_override.<...key>'
                groom: '$.model'
                rig: '$.model'
                effect: '$.model'
                surface: '$.model'
                light: '$.model'
    #       asset version override enable
    asset_version_override_enable:
        type: Switch
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.output'
        #
        input_ports:
            - 'off'
            - 'on'
        #
        expressions:
            in: '1 if getParent().variant.asset_version_override.enable else 0'
        #
        connections:
            # off
            - '<..asset_version_main_enable.output>'
            - '<.path>.off'
            # on
            - '<..asset_version_override.output>'
            - '<.path>.on'
    #       shot version main
    shot_version_main:
        type: 'GroupStack'
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.out'
        #
        connections:
            - '<..asset_version_override_enable.output>'
            - '<.path>.in'
        #
        child:
            type: 'UsdInVariantSelect'
            #
            path_pattern: '{parent}/<option.type_abr>__<...key>__{key}'
            #
            nodes:
                animation:
                    parameters:
                        args/variantSetName/enable: 1
                        args/variantSetName/value: '<...key>_main'
                        args/variantSelection/enable: 1
                        args/variantSelection/value: 'None'
                    #
                    expressions:
                        location: 'getParent().getParent().cache.asset_usd.root'
                        args/variantSelection/value: 'getParent().getParent().variant.shot_version_main.<...key>'
                character_effect: '$.animation'
                effect: '$.animation'
                light: '$.animation'
    #       shot version main enable
    shot_version_main_enable:
        type: Switch
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.output'
        #
        input_ports:
            - 'off'
            - 'on'
        #
        expressions:
            in: '1 if getParent().variant.shot_version_main.enable else 0'
        #
        connections:
            # off
            - '<..asset_version_override_enable.output>'
            - '<.path>.off'
            # on
            - '<..shot_version_main.output>'
            - '<.path>.on'
    #       shot version override
    shot_version_override:
        type: 'GroupStack'
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.out'
        #
        connections:
            - '<..shot_version_main_enable.output>'
            - '<.path>.in'
        #
        child:
            type: 'UsdInVariantSelect'
            #
            path_pattern: '{parent}/<option.type_abr>__<...key>__{key}'
            #
            nodes:
                animation:
                    parameters:
                        args/variantSetName/enable: 1
                        args/variantSetName/value: '<...key>_main'
                        args/variantSelection/enable: 1
                        args/variantSelection/value: 'None'
                    #
                    expressions:
                        location: 'getParent().getParent().cache.asset_usd.root'
                        args/variantSelection/value: 'getParent().getParent().variant.shot_version_override.<...key>'
                character_effect: '$.animation'
                effect: '$.animation'
                light: '$.animation'
    #       shot version override enable
    shot_version_override_enable:
        type: Switch
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.output'
        #
        input_ports:
            - 'off'
            - 'on'
        #
        expressions:
            in: '1 if getParent().variant.shot_version_override.enable else 0'
        #
        connections:
            # off
            - '<..shot_version_main_enable.output>'
            - '<.path>.off'
            # on
            - '<..shot_version_override.output>'
            - '<.path>.on'
    #   setting
    #       resolver look file
    resolver_look_file:
        type: 'DollarLookFile'
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.o0'
        #
        connections:
            # input
            - '<..shot_version_override_enable.output>'
            - '<.path>.i0'
    #       resolver look file enable
    resolver_look_file_enable:
        type: Switch
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.output'
        #
        input_ports:
            - 'off'
            - 'on'
        #
        expressions:
            in: '1 if getParent().setting.resolver_look_file_enable else 0'
        #
        connections:
            # off
            - '<..shot_version_override_enable.output>'
            - '<.path>.off'
            # on
            - '<..resolver_look_file.output>'
            - '<.path>.on'
    #   debugger
    #       reverse face vertex
    reverse_face_vertex:
        type: 'OpScript'
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.out'
        #
        parameters:
            script/lua:
                |-
                local m = require('wsp_op_script')
                m.reverse_face_vertex_indices()
        #
        expressions:
            CEL:
                |-
                '(({}//*{{attr("type") == "subdmesh"}}))'.format(getParent().cache.asset_usd.root)
        #
        connections:
            - '<..resolver_look_file_enable.output>'
            - '<.path>.i0'
    #           reverse face vertex enable
    reverse_face_vertex_enable:
        type: Switch
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.output'
        #
        input_ports:
            - 'off'
            - 'on'
        #
        expressions:
            in: '1 if getParent().debugger.reverse_face_vertex_enable else 0'
        #
        connections:
            # off
            - '<..resolver_look_file_enable.output>'
            - '<.path>.off'
            # on
            - '<..reverse_face_vertex.output>'
            - '<.path>.on'
    # merge
    merge:
        type: 'Merge'
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.out'
        #
        input_ports:
            - 'geometry'
            - 'join'
        #
        connections:
            # geometry
            - '<..reverse_face_vertex_enable.output>'
            - '<.path>.geometry'
            # join
            - '<main.path>.join'
            - '<.path>.join'
    # extra
    #   translate
    translate:
        type: 'AttributeSet'
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.out'
        #
        parameters:
            attributeName: 'xform.interactive.translate'
            numberValue: { size: 3, tuple_size: 1, value: [ 0.0, 0.0, 0.0 ] }
        #
        expressions:
            paths/i0: 'self.getParent().extra.translate.root'
            #
            numberValue/i0: 'self.getParent().extra.translate.value.i0'
            numberValue/i1: 'self.getParent().extra.translate.value.i1'
            numberValue/i2: 'self.getParent().extra.translate.value.i2'
        #
        connections:
            - '<..merge.output>'
            - '<.path>.A'
    #   translate enable
    translate_enable:
        type: Switch
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.output'
        #
        input_ports:
            - 'off'
            - 'on'
        #
        expressions:
            in: '1 if getParent().extra.translate.enable else 0'
        #
        connections:
            # off
            - '<..merge.output>'
            - '<.path>.off'
            # on
            - '<..translate.output>'
            - '<.path>.on'
    #   turn around op
    turn_around_op:
        type: TurnAroundOp_Wsp
        path: '<main.path>/<option.type>__<..key>'
        input: '<.path>.input'
        output: '<.path>.output'
        #
        expressions:
            option/enable: 'getParent().extra.turn_around.enable'
            option/root: 'getParent().extra.turn_around.root'
            option/direction: 'getParent().extra.turn_around.direction'
            option/start_frame: 'getParent().extra.turn_around.start_frame'
            option/end_frame: 'getParent().extra.turn_around.end_frame'
            option/frame_offset: 'getParent().extra.turn_around.frame_offset'
            option/pivot_locator: 'getParent().extra.turn_around.pivot_locator'
            option/axis: 'getParent().extra.turn_around.axis'
        #
        connections:
            #
            - '<..translate_enable.output>'
            - '<.input>'
    # register
    data_register:
        type: 'OpScript'
        path: '<main.path>/<option.type>__<..key>'
        input: '<.path>.i0'
        output: '<.path>.out'
        #
        ports:
            #
            user/data_1:
                widget: string2
                value: [ 'geometry.declare', '' ]
                tool_tip: '...'
                lock: True
            #
            user/data_2:
                widget: string2
                value: [ 'geometry.scheme', '' ]
                tool_tip: '...'
                lock: True
            #
            user/data_3:
                widget: string2
                value: [ 'geometry.root', '' ]
                tool_tip: '...'
                lock: True
        #
        parameters:
            CEL: '/root'
            script/lua:
                |-
                local m = require('wsp_op_script')

                local location = Interface.GetInputLocationPath()
                local user_attribute = Interface.GetOpArg('user')
                
                function main()
                    m.register_by_data(m.get_data_for_register(location, user_attribute))
                end
                
                main()
        #
        expressions:
            user/data_1/i1: 'getParent().getNodeName()'
            user/data_2/i1: 'getParent().workspace.register.geometry_scheme'
            user/data_3/i1: 'getParent().workspace.register.geometry_root'
        #
        connections:
            - '<..turn_around_op.output>'
            - '<.input>'
            # output
            - '<.output>'
            - '<main.output>'
