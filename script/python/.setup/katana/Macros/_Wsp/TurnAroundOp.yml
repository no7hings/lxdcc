option:
    root: '/rootNode'
    category: 'workspace'
    type: 'turn_around_op'
    type_abr: 'rsc_mrg'
    description:
        |-
        Turn around something
    variant_key: ''
    #
    color:
        r: 0
        g: 0
        b: 0
#
main:
    type: 'Group'
    path: '<option.root>/<option.type>'
    input: '<.path>.input'
    output: '<.path>.output'
    #
    clear_start: 'extra'
    #
    attributes:
        ns_offsetX: 480
        ns_offsetY: 120
        #
        ns_colorr: <option.color.r>
        ns_colorg: <option.color.g>
        ns_colorb: <option.color.b>
    #
    input_ports:
        - 'input'
    #
    output_ports:
        - 'output'
    #
    ports:
        #   turn around
        option/enable:
            widget: boolean
            value: False
            tool_tip: '...'

        option/root:
            widget: path
            value: '/root/world/geo/master'
            tool_tip: '...'

        option/direction:
            widget: enumerate
            value: ['clockwise', 'anticlockwise']
            tool_tip: '...'

        option/start_frame:
            widget: integer
            value: 1
            tool_tip: '...'

        option/end_frame:
            widget: integer
            value: 60
            tool_tip: '...'

        option/frame_offset:
            widget: integer
            value: 0
            tool_tip: '...'

        option/pivot_locator:
            widget: path
            value: '/root/world/loc/pivot'
            tool_tip: '...'

        option/axis:
            widget: enumerate
            value: ['X', 'Y', 'Z']
            default: 'Y'
            tool_tip: '...'
#
node:
    # locator
    locator:
        type: 'PrimitiveCreate'
        name: '<option.type>__<..key>'
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.out'
        #
        parameters:
            type: 'locator'
        #
        expressions:
            name: 'getParent().option.pivot_locator'
    # merge
    merge:
        type: 'Merge'
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.out'
        #
        input_ports:
            - 'input'
            - 'locator'
        #
        connections:
            # input
            - '<main.input>'
            - '<.path>.input'
            # locator
            - '<..locator.output>'
            - '<.path>.locator'
    #       turn around
    turn_around:
        type: 'Transform3D'
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.out'
        #
        expressions:
            path: 'getParent().option.root'
            # around X
            rotate/i0:
                |-
                360/(
                    getParent().option.end_frame-getParent().option.start_frame+1
                )*(
                    (frame+getParent().option.frame_offset)-getParent().option.start_frame
                )*(
                    1 if getParent().option.direction == 'anticlockwise' else -1
                ) if getParent().option.start_frame <= (
                    frame+getParent().option.frame_offset
                ) <= getParent().option.end_frame and getParent().option.axis == 'X' else 0
            # around Y
            rotate/i1:
                |-
                360/(
                    getParent().option.end_frame-getParent().option.start_frame+1
                )*(
                    (frame+getParent().option.frame_offset)-getParent().option.start_frame
                )*(
                    1 if getParent().option.direction == 'anticlockwise' else -1
                ) if getParent().option.start_frame <= (
                    frame+getParent().option.frame_offset
                ) <= getParent().option.end_frame and getParent().option.axis == 'Y' else 0
            # around Z
            rotate/i2:
                |-
                360/(
                    getParent().option.end_frame-getParent().option.start_frame+1
                )*(
                    (frame+getParent().option.frame_offset)-getParent().option.start_frame
                )*(
                    1 if getParent().option.direction == 'anticlockwise' else -1
                ) if getParent().option.start_frame <= (
                    frame+getParent().option.frame_offset
                ) <= getParent().option.end_frame and getParent().option.axis == 'Z' else 0
            pivot:
                |-
                getNode('<...locator.name>').transform.translate
        #
        connections:
            - '<..merge.output>'
            - '<.path>.in'
    #       turn around enable
    turn_around_enable:
        type: Switch
        path: '<main.path>/<option.type>__<..key>'
        output: '<.path>.output'
        #
        input_ports:
            - 'off'
            - 'on'
        #
        expressions:
            in: '1 if getParent().option.enable else 0'
        #
        connections:
            # off
            - '<..merge.output>'
            - '<.path>.off'
            # on
            - '<..turn_around.output>'
            - '<.path>.on'
            # output
            - '<.output>'
            - '<main.output>'
