option:
    root: '/rootNode'
    category: 'workspace'
    type: 'turntable'
    type_abr: 'ttb'
    create_type: 'Turntable_Wsp'
    description:
        |-
        for turntable
    variant_key: ''
    #
    auto_color: False
    #
    color:
        r: .25
        g: .125
        b: .5
#
main:
    type: 'Group'
    path: '<option.root>/<option.type>'
    input: '<.path>.join_upstream'
    output: '<.path>.output'
    #
    clear_start: 'extra'
    #
    attributes:
        ns_offsetX: 480
        ns_offsetY: 120
        #
        ns_colorr: <option.color.r>
        ns_colorg: <option.color.g>
        ns_colorb: <option.color.b>
        #
        comment: '<option.description>'
    #
    input_ports:
        - 'join_upstream'
    #
    output_ports:
        - 'output'
    #
    ports:
        # basic
        type:
            widget: string
            value: '<option.create_type>'
            tool_tip: '...'
            lock: True
        # option
        option/enable:
            widget: boolean
            value: False
            tool_tip: '...'

        option/target:
            widget: path
            value: '/root/world/geo/master'
            tool_tip: '...'

        option/direction:
            widget: enumerate
            value: ['clockwise', 'anticlockwise']
            tool_tip: '...'

        option/start_frame:
            widget: integer
            value: 1
            tool_tip: '...'

        option/end_frame:
            widget: integer
            value: 60
            tool_tip: '...'

        option/frame_offset:
            widget: integer
            value: 0
            tool_tip: '...'

        option/pivot_locator:
            widget: path
            value: '/root/world/loc/turntable/pivot_locator'
            tool_tip: '...'

        option/axis:
            widget: enumerate
            value: ['X', 'Y', 'Z']
            default: 'Y'
            tool_tip: '...'
#
node:
    join_upstream_dot:
        type: Dot
        path: '<main.path>/<option.type_abr>__<..key>'
        input: '<.path>.input'
        output: '<.path>.output'
        #
        connections:
            # input
            - '<main.input>'
            - '<.input>'
    # locator
    locator:
        type: 'PrimitiveCreate'
        name: '<option.type_abr>__<..key>'
        path: '<main.path>/<option.type_abr>__<..key>'
        output: '<.path>.out'
        #
        parameters:
            type: 'locator'
        #
        expressions:
            name: 'getParent().option.pivot_locator'
    # upstream_merge
    upstream_merge:
        tag: 'UMG'
        type: UpstreamMerge_Wsp
        name: '<option.type_abr>__<.tag>'
        path: '<main.path>/<.name>'
        output: '<.path>.out'
        #
        input_ports:
            - 'input'
            - 'locator'
        #
        connections:
            # input
            - '<main.input>'
            - '<.path>.input'
            # locator
            - '<..locator.output>'
            - '<.path>.locator'
    #   transformation
    #       translate pivot
    translate_pivot:
        type: AttributeSet
        path: '<main.path>/<option.type_abr>__<..key>'
        output: '<.path>.out'
        #
        parameters:
            attributeName: 'xform.translate_pivot.translate_pivot'
            numberValue: {size: 1, tuple_size: 3, value: [0, 0, 0]}
        #
        expressions:
            paths/i0: 'self.getParent().option.target'
            #
            numberValue/i0:
                |-
                getParam('<node.locator.name>.transform.translate.x')
            numberValue/i1:
                |-
                getParam('<node.locator.name>.transform.translate.y')
            numberValue/i2:
                |-
                getParam('<node.locator.name>.transform.translate.z')
        #
        connections:
            - '<..upstream_merge.output>'
            - '<.path>.A'
    #       rotate
    rotate_x:
        type: AttributeSet
        path: '<main.path>/<option.type_abr>__<..key>'
        output: '<.path>.out'
        #
        parameters:
            attributeName: 'xform.group.rotateX'
            numberValue: {size: 1, tuple_size: 4, value: [1, 1, 0, 0]}
        #
        expressions:
            paths/i0: 'self.getParent().option.target'
            #
            numberValue/i0:
                |-
                360/(
                    getParent().option.end_frame-getParent().option.start_frame+1
                )*(
                    (frame+getParent().option.frame_offset)-getParent().option.start_frame
                )*(
                    1 if getParent().option.direction == 'anticlockwise' else -1
                ) if getParent().option.start_frame <= (
                    frame+getParent().option.frame_offset
                ) <= getParent().option.end_frame and getParent().option.axis == 'X' else 0
        #
        connections:
            - '<..translate_pivot.output>'
            - '<.path>.A'
    #
    rotate_y:
        type: AttributeSet
        path: '<main.path>/<option.type_abr>__<..key>'
        output: '<.path>.out'
        #
        parameters:
            attributeName: 'xform.group.rotateY'
            numberValue: {size: 1, tuple_size: 4, value: [0, 0, 1, 0]}
        #
        expressions:
            paths/i0: 'self.getParent().option.target'
            #
            numberValue/i0:
                |-
                360/(
                    getParent().option.end_frame-getParent().option.start_frame+1
                )*(
                    (frame+getParent().option.frame_offset)-getParent().option.start_frame
                )*(
                    1 if getParent().option.direction == 'anticlockwise' else -1
                ) if getParent().option.start_frame <= (
                    frame+getParent().option.frame_offset
                ) <= getParent().option.end_frame and getParent().option.axis == 'Y' else 0
        #
        connections:
            - '<..rotate_x.output>'
            - '<.path>.A'
    #
    rotate_z:
        type: AttributeSet
        path: '<main.path>/<option.type_abr>__<..key>'
        output: '<.path>.out'
        #
        parameters:
            attributeName: 'xform.group.rotateZ'
            numberValue: {size: 1, tuple_size: 4, value: [0, 0, 0, 1]}
        #
        expressions:
            paths/i0: 'self.getParent().option.target'
            #
            numberValue/i0:
                |-
                360/(
                    getParent().option.end_frame-getParent().option.start_frame+1
                )*(
                    (frame+getParent().option.frame_offset)-getParent().option.start_frame
                )*(
                    1 if getParent().option.direction == 'anticlockwise' else -1
                ) if getParent().option.start_frame <= (
                    frame+getParent().option.frame_offset
                ) <= getParent().option.end_frame and getParent().option.axis == 'Z' else 0
        #
        connections:
            - '<..rotate_y.output>'
            - '<.path>.A'
    #       translate pivot inverse
    translate_pivot_inverse:
        type: AttributeSet
        path: '<main.path>/<option.type_abr>__<..key>'
        output: '<.path>.out'
        #
        parameters:
            attributeName: 'xform.translate_pivotInverse.translate_pivotInverse'
            numberValue: {size: 1, tuple_size: 3, value: [0, 0, 0]}
        #
        expressions:
            paths/i0: 'self.getParent().option.target'
            #
            numberValue/i0:
                |-
                -getParam('<node.locator.name>.transform.translate.x')
            numberValue/i1:
                |-
                -getParam('<node.locator.name>.transform.translate.y')
            numberValue/i2:
                |-
                -getParam('<node.locator.name>.transform.translate.z')
        #
        connections:
            - '<..rotate_z.output>'
            - '<.path>.A'
    #   enable
    enable:
        type: Switch
        path: '<main.path>/<option.type_abr>__<..key>'
        output: '<.path>.output'
        #
        input_ports:
            - 'off'
            - 'on'
        #
        expressions:
            in: '1 if getParent().option.enable else 0'
        #
        connections:
            # off
            - '<..join_upstream_dot.output>'
            - '<.path>.off'
            # on
            - '<..translate_pivot_inverse.output>'
            - '<.path>.on'
            # output
            - '<.output>'
            - '<main.output>'
