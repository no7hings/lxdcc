{
    "lynxi/mesh": {
        "target_typepath": "mesh",
        "port_converter": {
            "inputs:material": {
                "target_portpath": "material"
            },

            "inputs:disp_height": {
                "target_portpath": "disp_height"
            },
            "inputs:disp_padding": {
                "target_portpath": "disp_padding"
            },
            "inputs:disp_zero_value": {
                "target_portpath": "disp_zero_value"
            },
            "inputs:disp_autobump": {
                "target_portpath": "disp_autobump"
            },
            "inputs:autobump_visibility": {
                "target_portpath": "autobump_visibility"
            },
            "inputs:smoothing": {
                "target_portpath": "smoothing"
            },
            "inputs:step_size": {
                "target_portpath": "step_size"
            },
            "inputs:subdiv_type": {
                "target_portpath": "subdiv_type"
            },
            "inputs:subdiv_iterations": {
                "target_portpath": "subdiv_iterations"
            },
            "inputs:subdiv_adaptive_error": {
                "target_portpath": "subdiv_adaptive_error"
            },
            "inputs:subdiv_adaptive_metric": {
                "target_portpath": "subdiv_adaptive_metric"
            },
            "inputs:subdiv_adaptive_space": {
                "target_portpath": "subdiv_adaptive_space"
            },
            "inputs:subdiv_uv_smoothing": {
                "target_portpath": "subdiv_uv_smoothing"
            },
            "inputs:subdiv_frustum_ignore": {
                "target_portpath": "subdiv_frustum_ignore"
            },
            "inputs:subdiv_smooth_derivs": {
                "target_portpath": "subdiv_smooth_derivs"
            },
            "inputs:invert_normals": {
                "target_portpath": "invert_normals"
            },
            "inputs:opaque": {
                "target_portpath": "opaque"
            },
            "inputs:matte": {
                "target_portpath": "matte"
            },
            "inputs:volume_padding": {
                "target_portpath": "volume_padding"
            },
            "inputs:self_shadows": {
                "target_portpath": "self_shadows"
            },
            "inputs:receive_shadows": {
                "target_portpath": "receive_shadows"
            },
            "inputs:use_light_group": {
                "target_portpath": "use_light_group"
            },
            "inputs:use_shadow_group": {
                "target_portpath": "use_shadow_group"
            },

            "inputs:camera": {
                "target_portpath": "camera"
            },
            "inputs:shadow": {
                "target_portpath": "shadow"
            },
            "inputs:diffuse_transmit": {
                "target_portpath": "diffuse_transmit"
            },
            "inputs:specular_transmit": {
                "target_portpath": "specular_transmit"
            },
            "inputs:diffuse_reflect": {
                "target_portpath": "diffuse_reflect"
            },
            "inputs:specular_reflect": {
                "target_portpath": "specular_reflect"
            },
            "inputs:subsurface": {
                "target_portpath": "subsurface"
            },
            "inputs:volume": {
                "target_portpath": "volume"
            }
        },
        "create_expression": {
            "command":
            [
                "mtl_port_0 = self.tgtNode().port('subdiv_iterations')",
                "dcc_port_0 = self.srcNode().port('inputs:subdiv_iterations')",
                "condition_0 = self.tgtNode().port('subdiv_type').isValueChanged()",
                "portdata_0 = dcc_port_0.portraw() if condition_0 is True else 0",
                "mtl_port_0.setPortraw(portdata_0)",

                "mtl_port_1 = self.tgtNode().port('autobump_visibility')",
                "dcc_port_1 = self.srcNode().port('inputs:autobump_visibility')",
                "condition_1 = self.tgtNode().port('disp_autobump').isValueChanged()",
                "portdata_1 = dcc_port_1.portraw() if condition_1 is True else 1",
                "mtl_port_1.setPortraw(portdata_1)"
            ]
        }
    },
    "lynxi/xgen_description": {
        "target_typepath": "xgen_description",
        "port_converter": {
            "inputs:material": {
                "target_portpath": "material"
            },

            "inputs:invert_normals": {
                "target_portpath": "invert_normals"
            },
            "inputs:opaque": {
                "target_portpath": "opaque"
            },
            "inputs:matte": {
                "target_portpath": "matte"
            },
            "inputs:self_shadows": {
                "target_portpath": "self_shadows"
            },
            "inputs:receive_shadows": {
                "target_portpath": "receive_shadows"
            },
            "inputs:use_light_group": {
                "target_portpath": "use_light_group"
            },
            "inputs:use_shadow_group": {
                "target_portpath": "use_shadow_group"
            },

            "inputs:camera": {
                "target_portpath": "camera"
            },
            "inputs:shadow": {
                "target_portpath": "shadow"
            },
            "inputs:diffuse_transmit": {
                "target_portpath": "diffuse_transmit"
            },
            "inputs:specular_transmit": {
                "target_portpath": "specular_transmit"
            },
            "inputs:diffuse_reflect": {
                "target_portpath": "diffuse_reflect"
            },
            "inputs:specular_reflect": {
                "target_portpath": "specular_reflect"
            },
            "inputs:subsurface": {
                "target_portpath": "subsurface"
            },
            "inputs:volume": {
                "target_portpath": "volume"
            }
        }
    },
    "lynxi/curve": {
        "target_typepath": "curves",
        "port_converter": {
            "inputs:material": {
                "target_portpath": "material"
            },

            "inputs:invert_normals": {
                "target_portpath": "invert_normals"
            },
            "inputs:opaque": {
                "target_portpath": "opaque"
            },
            "inputs:matte": {
                "target_portpath": "matte"
            },
            "inputs:self_shadows": {
                "target_portpath": "self_shadows"
            },
            "inputs:receive_shadows": {
                "target_portpath": "receive_shadows"
            },
            "inputs:use_light_group": {
                "target_portpath": "use_light_group"
            },
            "inputs:use_shadow_group": {
                "target_portpath": "use_shadow_group"
            },

            "inputs:mode": {
                "target_portpath": "mode"
            },
            "inputs:min_pixel_width": {
                "target_portpath": "min_pixel_width"
            },

            "inputs:camera": {
                "target_portpath": "camera"
            },
            "inputs:shadow": {
                "target_portpath": "shadow"
            },
            "inputs:diffuse_transmit": {
                "target_portpath": "diffuse_transmit"
            },
            "inputs:specular_transmit": {
                "target_portpath": "specular_transmit"
            },
            "inputs:diffuse_reflect": {
                "target_portpath": "diffuse_reflect"
            },
            "inputs:specular_reflect": {
                "target_portpath": "specular_reflect"
            },
            "inputs:subsurface": {
                "target_portpath": "subsurface"
            },
            "inputs:volume": {
                "target_portpath": "volume"
            }
        }
    }
}