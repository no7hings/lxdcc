option:
    # base
    basic:
        # default options for all entity types
        default_basic_entity_type_options:
            id: { type: 'integer', args: [ 'primary key', 'autoincrement', 'not null', 'unique' ] }
            #
            enable: { type: 'boolean', args: [ 'not null', 'default 1' ] }
            status: { type: 'string', args: [ 'not null', 'default "normal"' ] }
            # create time
            ctime: { type: 'timestamp', args: [ 'default CURRENT_TIMESTAMP' ] }
            # modify time
            mtime: { type: 'timestamp', args: [ 'default CURRENT_TIMESTAMP' ] }
            #
            entity_category: { type: 'string', args: ['not null'] }
            entity_type: { type: 'string', args: ['not null'] }
            #
            kind: { type: 'string' }
            #
            matadata: { type: 'json' }
            #
            namespace: { type: 'string' }
            # key
            path: { type: 'string', args: [ 'not null', 'unique' ] }
    # definition for all entity types
    basic_types:
        bsc_prim:
            options:
                name: { type: 'string', args: ['not null'] }
                group: { type: 'string', args: ['not null'] }
                # icon show in GUI
                gui_name: { type: 'string' }
                #
                gui_icon_name: { type: 'string', args: [ 'default "database/object"' ] }
                gui_description: { type: 'string' }
                gui_status: { type: 'string' }
        #
        bsc_assign:
            options:
                node: { type: 'string', args: [ 'not null' ] }
                value: { type: 'string', args: [ 'not null' ] }
        #
        bsc_port:
            options:
                node: { type: 'string', args: [ 'not null' ] }
                port: { type: 'string', args: [ 'not null' ] }
                value: { type: 'json', args: [ 'not null' ] }
        #
        bsc_connection:
            options:
                # override GUI icon name and use default
                gui_icon_name: { type: 'string', args: [ 'default "database/tag"' ] }
                #
                source: { type: 'string', args: [ 'not null' ] }
                target: { type: 'string', args: [ 'not null' ] }
    #
    entity_categories:
        dtb_type:
            basic_type: 'bsc_prim'
            #
            options_over:
                gui_icon_name: { type: 'string', args: [ 'default "database/objects"' ] }
        #
        dtb_tag:
            basic_type: 'bsc_prim'
            #
            options_over:
                gui_icon_name: { type: 'string', args: [ 'default "database/tag"' ] }
        #
        dtb_node:
            basic_type: 'bsc_prim'
        #
        dtb_port:
            basic_type: 'bsc_port'
        #
        dtb_assign:
            basic_type: 'bsc_assign'
        #
        dtb_connection:
            basic_type: 'bsc_connection'
    #
    entities:
        # resource type
        /surface:
            entity_type: 'category_group'
            options: { kind: 'resource-category-group', gui_icon_name: 'database/groups' }
        #
        /surface/asphalt:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            # definition children
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'fine', 'rough', 'torn', 'other' ]
        #
        /surface/bark:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'beech', 'birch', 'oak', 'palm', 'pine', 'spruce', 'willow', 'other' ]
        #
        /surface/branch:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'alder', 'birch', 'juniper', 'pine', 'spruce', 'other' ]
        #
        /surface/brick:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'modern', 'mortar', 'painted', 'rough', 'other' ]
        #
        /surface/coal:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'brick', 'debris', 'other' ]
        #
        /surface/concrete:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'cast_in_situ', 'damaged', 'dirty', 'painted', 'rough', 'slab', 'smooth', 'other' ]
        #
        /surface/debris:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'construction', 'nature', 'other' ]
        #
        /surface/fabric:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'carpet', 'leather', 'pattern', 'plain', 'tarp', 'other' ]
        #
        /surface/grass:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'artificial', 'dried', 'lawn', 'patchy', 'wild', 'other' ]
        #
        /surface/gravel:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'construction', 'natural', 'pebbledash', 'other' ]
        #
        /surface/ground:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'forest', 'jungle', 'roots', 'other' ]
        #
        /surface/historical:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'asian', 'medieval', 'middle_eastern', 'roman', 'other' ]
        #
        /surface/marble:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'polished', 'rough', 'tile', 'other' ]
        #
        /surface/metal:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'bare', 'corroded', 'corrugated', 'gun', 'painted', 'sheet', 'treated', 'other' ]
        #
        /surface/moss:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'ground', 'rock', 'other' ]
        #
        /surface/plaster:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'damaged', 'fresh', 'old', 'painted', 'other' ]
        #
        /surface/rock:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'cliff', 'jagged', 'lava', 'mossy', 'rough', 'smooth', 'other' ]
        #
        /surface/roofing:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'new', 'old', 'other' ]
        #
        /surface/sand:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'beach', 'desert', 'other' ]
        #
        /surface/snow:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'mixed', 'pure', 'other' ]
        #
        /surface/soil:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'clay', 'mud', 'mulch', 'sandy', 'other' ]
        #
        /surface/stone:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'castle', 'cobblestone', 'floor', 'granite', 'limestone', 'mosaic', 'pebble', 'terrazzo', 'tile', 'wall', 'other' ]
        #
        /surface/tile:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'ceramic', 'grout', 'pavestone', 'sidewalk', 'stone', 'other' ]
        #
        /surface/wood:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'board', 'log', 'parquet', 'plank', 'veneer', 'other' ]
        #
        /surface/other:
            entity_type: 'category'
            options: { kind: 'resource-category', gui_icon_name: 'database/group' }
            children:
                entity_type: 'type'
                options: { kind: 'resource-type', group: '<....key>' }
                names: [ 'climber', 'creature', 'dirt road', 'edible', 'fur', 'paper', 'various', 'other' ]
        # resource-tag
        # resource-primary-semantic-tag
        /color:
            entity_type: 'tag_group'
            options: { kind: 'resource-semantic-tag-group', gui_icon_name: 'database/group' }
            children:
                entity_type: 'tag'
                options: { kind: 'resource-primary-semantic-tag', group: '<....key>' }
                names: [ 'black', 'brown', 'blue', 'gray', 'green', 'orange', 'pink', 'purple', 'red', 'tan', 'white', 'yellow', 'other' ]
        #
        /environment:
            entity_type: 'tag_group'
            options: { kind: 'resource-semantic-tag-group', gui_icon_name: 'database/group' }
            children:
                entity_type: 'tag'
                options: { kind: 'resource-primary-semantic-tag', group: '<....key>' }
                names: [ 'ancient', 'desert', 'forest', 'freshwater', 'grassland', 'industrial', 'medieval', 'other' ]
        #
        /state:
            entity_type: 'tag_group'
            options: { kind: 'resource-semantic-tag-group', gui_icon_name: 'database/group' }
            children:
                entity_type: 'tag'
                options: { kind: 'resource-primary-semantic-tag', group: '<....key>' }
                names: ['old', 'new', 'damaged', 'other']
        # resource-semantic-tag
        /orientation:
            entity_type: 'tag_group'
            options: { kind: 'resource-semantic-tag-group', gui_icon_name: 'database/group' }
            children:
                entity_type: 'tag'
                options: { kind: 'resource-secondary-semantic-tag', group: '<....key>' }
                names: [ ]
        #
        /descriptive:
            entity_type: 'tag_group'
            options: { kind: 'resource-semantic-tag-group', gui_icon_name: 'database/group' }
            children:
                entity_type: 'tag'
                options: { kind: 'resource-secondary-semantic-tag', group: '<....key>' }
                names: [ ]
        #
        /theme:
            entity_type: 'tag_group'
            options: { kind: 'resource-semantic-tag-group', gui_icon_name: 'database/group' }
            children:
                entity_type: 'tag'
                options: { kind: 'resource-secondary-semantic-tag', group: '<....key>' }
                names: [ ]
        # property tag
        /resolution:
            entity_type: 'tag_group'
            options: { kind: 'resource-property-tag-group', gui_icon_name: 'database/group' }
            children:
                entity_type: 'tag'
                options: { kind: 'resource-primary-semantic-tag', group: '<....key>' }
                names: [ ]
        # resource-user-tag
        /favorite:
            entity_type: 'tag_group'
            options: { kind: 'resource-user-tag-group', gui_icon_name: 'database/group' }
            children:
                entity_type: 'tag'
                options: { kind: 'resource-user-tag', group: '<....key>' }
                names: [ ]
        # resource-file-tag
        /texture:
            entity_type: 'tag_group'
            options: { kind: 'resource-storage-tag-group', gui_icon_name: 'database/group' }
            children:
                entity_type: 'tag'
                options: { kind: 'resource-file-tag', group: '<....key>' }
                names: [ 'albedo', 'ao', 'bump', 'cavity', 'displacement', 'gloss', 'normal', 'roughness', 'specular', 'translucency' ]
    #
    variants:
        root-windows: 'l:/resource/library/texture'
        root-linux: '/l/resource/library/texture'
#
patterns:
    root-dir: '{root}'
    #
    database-file: '<.root-dir>/.database/sqlite.db'
    #
    resource-dir: '<.root-dir>/all/{category_group}/{resource}'
    #
    version-dir: '<.resource-dir>/{version}'
    # image
    image-dir: '<.version-dir>/image'
    image-preview-png-file: '<.image-dir>/preview.png'
    # quixel
    quixel-dir: '<.version-dir>/quixel'
    quixel-metadata-dir: '<.quixel-dir>/metadata'
    quixel-metadata-json-file: '<.quixel-metadata-dir>/{resource}.json'
    quixel-image-dir: '<.quixel-dir>/image'
    quixel-image-png-file: '<.quixel-image-dir>/{resource}.png'
    #
    quixel-texture-dir: '<.quixel-dir>/texture'
    # texture
    texture-dir: '<.version-dir>/texture'
    texture-original-dir: '<.texture-dir>/original'
    texture-original-src-dir: '<.texture-original-dir>/src'
    texture-original-src-file: '<.texture-original-src-dir>/{resource}.{texture_type_tag}.{texture_format}'
    #
    texture-acescg-dir: '<.texture-dir>/acescg'
    texture-acescg-src-dir: '<.texture-acescg-dir>/src'
    texture-acescg-src-file: '<.texture-acescg-src-dir>/{resource}.{texture_type_tag}.{texture_format}'
    texture-acescg-tx-dir: '<.texture-acescg-dir>/tx'
#
version-storage:
    # directory mapper for version
    directory:
        /texture/original/src: 'texture-original-src-dir'
        /texture/acescg/src: 'texture-acescg-src-dir'
        /texture/acescg/tx: 'texture-acescg-tx-dir'
    file:
        /texture/original/src/texture: {
            database: '/texture/original/src/{texture_type_tag}',
            storage: 'texture-original-src-file'
        }
